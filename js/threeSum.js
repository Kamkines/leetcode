function threeSum(nums) {
	const results = []
	if (nums.length < 3) return results

	nums = nums.sort((a, b) => a - b)

	let target = 0 // цель, которую надо достичь, т.е найти 3 цифры в сумме которых будет target, в моем случае 0

	for (let i = 0; i < nums.length - 2; i++) { // основной цикл, где перебираем массив с первого элемента до третьего с конца (поскольку нам нужны тройки).
		if (nums[i] > target) break // нужно для того, чтобы остановить цикл, ибо массив отсортирован, и если nums[i] > 0 (в моем случае), то в дальнейшем в сумме он не даст 0

		if (i > 0 && nums[i] == nums[i - 1]) continue // пропускаем дубликаты

		let j = i + 1 // устанавливаем число следующее после i
		let k = nums.length - 1 // число в конце массива для установление вторичного цикла, т.е. i изначальное число, j число следующее за ним, а k это количество числе после i
		
		while (j < k) {
			let sum = nums[i] + nums[j] + nums[k]

			if (sum == target) { // сумма равна таргету
				results.push([nums[i], nums[j], nums[k]]) // добавляем 3 цифры в массив
				while (nums[j] == nums[j + 1]) j++ // убираем дубликаты следующего числа для j
				while (nums[k] == nums[k - 1]) k-- // убираем дубликаты предыдущего числа для k
				j++ // двигаем направо числа
				k-- // двигаем налево числа
			} else if (sum < target) {
				j++ // двигаем направо числа, если условия не подошли
			} else { 
				k-- // двигаем налево числа, если условия не подошли
			}
		}
	}
	return results
};

// example
threeSum(nums = [-1,0,1,2,-1,-4])